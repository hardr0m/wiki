a:8:{s:2:"id";s:24:"git:initial_settings_git";s:6:"prefix";s:0:"";s:4:"text";s:8495:" ====== Начальные настройки Git ======
 

 
=====  1. Установка(Debian/Ubuntu). =====


$sudo apt install git
 
 
=====  2. Указать имя пользователя и email =====


$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com


=====  3.Выбор редактора =====

$ git config --global core.editor emacs(vim, nano)


=====  4. Проверка настроек. Просмотр версии. =====

$ git config --list
$ git config --v



=====  5. Как получить помощь. =====

$ git help <команда>
$ git <команда> - -help
$ man git-<команда>

Пример: 
$ git help config


=====  6.Создание нового репозитория. =====

$ git init



 ===== 7. Просмотр истории изменений в репозитории. =====

$ git log
$ git log - -online   #более удобный вид
$ git log - -stat   #сокращенная статистика для каждого коммита
$ git log - -pretty=oneline
$ git log - -pretty=format   #отображает наиболее полезные опции для изменения формата

Пример:
$ git log - -pretty=format:"%h - %an, %ar : %s"

Таблица 1. Полезные опции для git log - -pretty=format


**Опция.**	**Описания вывода.**

%H ---    Хеш коммита
%h ---    Сокращенный хеш коммита
%T ---    Хеш дерева
%t ---    Сокращенный хеш дерева
%P ---    Хеш родителей
%p ---    Сокращенный хеш родителей
%an ---   Имя автора
%ae ---   Электронная почта автора
%ad ---   Дата автора (формат даты можно задать опцией --date=option)
%ar ---   Относительная дата автора
%cn ---   Имя коммитера
%ce ---   Электронная почта коммитера
%cd ---   Дата коммитера
%cr ---   Относительная дата коммитера
%s ---    Содержание
  


$ git log - -pretty=format:"%h %s" - -graph   #показывает текущую ветку и историю слияний в виде графика





Таблица 2. Наиболее распространенные опции для команды git log


**Опция.	Описание.**

-p --- Показывает патч для каждого коммита.
- -stat --- Показывает статистику измененных файлов для каждого коммита.
- -shortstat --- Отображает только строку с количеством изменений/вставок/удалений для команды --stat.
- -name-only --- Показывает список измененных файлов после информации о коммите.
- -name-status --- Показывает список файлов, которые добавлены/изменены/удалены.
- -abbrev-commit --- Показывает только несколько символов SHA-1 чек-суммы вместо всех 40.
- -relative-date --- Отображает дату в относительном формате (например, «2 weeks ago») вместо стандартного формата даты.
- -graph --- Отображает ASCII граф с ветвлениями и историей слияний.
- -pretty --- Показывает коммиты в альтернативном формате. Возможные варианты опций: oneline, short, full, fuller и format (с помощью последней можно указать свой формат).
- -oneline --- Сокращение для одновременного использования опций --pretty=oneline --abbrev-commit.



Таблица 3. Опции для ограничения вывода команды git log

**Опция.	Описание.**

-(n) --- Показывает только последние n коммитов.
- -since, - -after --- Показывает только те коммиты, которые были сделаны после указанной даты.
- -until, - -before --- Показывает только те коммиты, которые были сделаны до указанной даты.
- -author --- Показывает только те коммиты, в которых запись author совпадает с указанной строкой.
- -committer --- Показывает только те коммиты, в которых запись committer совпадает с указанной строкой.
- -grep --- Показывает только коммиты, сообщение которых содержит указанную строку.
-S --- Показывает только коммиты, в которых изменение в коде повлекло за собой добавление или удаление указанной строки.



Пример:

$ git log --pretty="%h - %s" --author='Junio C Hamano' --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/


$ git reflog   #история всех операций 


 ===== 8. Коммиты - сброс и ресет. =====

$ git revert хэш коммита
$ git reset хэш коммита
$ git restore название файла


=====  9. Определить состояние файлов =====

$ git status
 
== ====== Вывод: ====== ==


На ветке dev
Ваша ветка обновлена в соответствии с «origin/dev».
нечего коммитить, нет изменений в рабочем каталоге


====  10. Создание новой ветки и переключение. ====


$ git branch   # показывает в какой ветки находимся 
$ git branch название ветки

Пример: 
$ git branch dev

Переключиться на ветку:
$ git chekckout dev

Создать ветку и сразу на нее переключиться:
$ git chekckout -b dev


==== 11. Работа с изменениями в репозитории. ====

Сборка слепка следующего коммита(индексирование изменений)
$ git add .   # в текущем каталоге

Запись индексированных изменений в репозитории:
$ git commit -m "именование внесенного изменения"

Включить новые изменения в последний созданный коммит:
$ git commit - -amend

Не создавать коммит, а только показать отчет и детальную информацию о нем, как если бы он был создан. (Используется для проверки на ошибки перед реальным коммитом):
$ git commit - -dry-run


12. Публикация репозитория.
$ git clone git@github.com:hardr0m/wiki.git
$ git clone git@github.com:hardr0m/wiki.git project   #можем клонировать сразу в новую папку project
$ git remote -v   # проверка репозитория
$ git push #   загрузка всех изменений в удаленный репозиторий
$ git push -u origin wiki   # создание новой ветки wiki и перенос всех изменений в удаленный репозиторий
$ git pull   #загрузка на локальный компьютер из удаленного репозитория
$ git fetch   #обновить текущую синхронизацию 


==== 13.Объединение веток. ====

===   схема работы ===
Создали ветку
Внесли изменения
Commit
Merge (слияние)

$ git merge wiki   # слияние ветки wiki с основной веткой master
$ git branch -d wiki   #удаление ветки wiki
$ git push - -delete origin wiki   


 ";s:6:"suffix";s:0:"";s:4:"date";i:1622531593;s:6:"client";s:2:"sa";s:5:"cname";s:65:"/opt/dokuwiki/data/cache/4/41c6f835e79ff915405945c860710c63.draft";s:6:"errors";a:0:{}}