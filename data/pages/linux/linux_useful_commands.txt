===== Полезные команды linux. =====

==== Создать пользователя одной командой ====

<code> 
sudo adduser gu_admin -G wheel -m -p $(openssl passwd -1 test1234) -s /bin/bash
</code>
==== Ssh авторизация по логину паролю: ====

<code>  
sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
</code>

==== Конвертируем centos 8 to rocky: ====
<code> 
wget https://raw.githubusercontent.com/rocky-linux/rocky-tools/main/migrate2rocky/migrate2rocky.sh  
sudo bash migrate2rocky.sh -r
</code>

=== GREP ===
Очистить файл от комментариев
<code>
grep -vE '(^[[:space:]]*([#;!].*)?$)' file

cat file | grep -v '^#'
</code>
Вывести все файлы начинающиеся с заглавной буквы\с буквы или цифры
<code>
grep -h '^[A-Z]' dirlist*.txt
grep -h '^[A-Za-z0-9]' dirlist*.txt
</code>


==== find ====
имена файлов и каталогов, содержащие пробелы и другие, потенциально вредные символы
<code>
find . -regex '.*[^-_./0-9a-zA-Z].*'
</code>

==== tail ====

Просмотр логов в живую
<code>
tail -f /var/log/syslog 
</code>


Уникальные IP-адреса из log-файла:
<code>
less /var/log/nginx/access.log | cut -d' ' -f1 | sort | uniq

less — утилита для вывода содержимого файла /var/log/nginx/access.log.
cut -d' ' -f1 — разбиваем строку на подстроки разделителем «пробел». Разделитель указывается флагом -d. Флагом -f указываем порядковый номер поля, которое будет отображаться в выводе. В данном случае «1» — первое поле, это и есть IP-адрес.
sort — сортировка строк по порядку. Команда сгруппирует одинаковые строки «рядом«. Команда sort необходима для корректной работы следующей команды — uniq.
uniq— выведет только уникальные строки, то есть в результате будут только уникальные IP-адреса.

Для вывода количества, нужно добавить флаг -с (от слова count) к команде uniq:
less /var/log/nginx/access.log | cut -d' ' -f1 | sort | uniq -c


Посмотрим, какие IP-адреса чаще всего обращаются к Nginx и выведем список по убыванию:

# awk '{print $1}' /var/log/nginx/access.log | sort | uniq -c | sort -nr


Допустим, если атакующий будет долбить в уязвимое место, то это будет адрес этой страницы.

# tail -1000 /var/log/nginx/access.log | egrep "GET / HTTP/1.1" | awk '{print $1}' | sort -n | uniq -c



</code>

==== Обработка текста ====

<code>

cat — объединяет файлы и выводит их в стандартный вывод;
sort — сортирует строки из текстовых файлов;
uniq — сообщает о повторяющихся строках или удаляет их;
cut — удаляет фрагменты из каждой строки в файлах;
paste — выполняет слияние строк из файлов;
join — объединяет строки из двух файлов по общему полю;
comm — выполняет построчное сравнение двух сортированных файлов;
diff — выполняет построчное сравнение файлов;
patch — применяет diff-файл (файл с результатами сравнения командой diff) к оригиналу;
tr — перекодирует или удаляет символы;
sed — потоковый редактор для фильтрации и преобразования текста;
aspell — интерактивная программа проверки орфографии.

</code>
===== SCP =====

==== Копирование файлов с удаленного компа (и наоборот) ====

=== С локального компьютера на удаленный ===


Пример команды:
<code>
scp /home/test.txt root@123.123.123.123:/directory
</code>
Файл test.txt будет скопирован на хост 123.123.123.123 в директорию «/directory».

=== С удаленного компьютера на локальный ===

Пример команды:
<code>
scp root@123.123.123.123:/home/test.txt /directory
</code>
Файл test.txt будет загружен с сервера 123.123.123.123 на локальный компьютер в папку «/directory».

=== Как подключиться к серверу по нестандартному порту ===

Пример команды:
<code>
scp -P 12345 /home/test.txt root@123.123.123.123:/directory
</code>
Эта команда подключается по порту 12345 к серверу 123.123.123.123 и копирует на него файл «test.txt» с локального компьютера в директорию «/directory».

==== RSYNC ====


==== Изменить имя хоста ====

<code> 
hostnamectl set-hostname NewHostName
</code>

sysctl -a | grep free
dmesg 2>&1 | grep "Killed"
dmesg 2>&1 | grep "Killed" | awk '{print 9 " " $8}'


==== IP VS IFCONFIG ====
<code>
https://inai.de/2008/02/19
</code>

==== Генерировать и переносить ключи. ====
<code>
ssh-keygen
ssh-copy-id -i ~/.ssh/id_rsa.pub username@ipaddress -P port
</code>

Копирование открытого ключа с помощью SSH
<code>
cat ~/.ssh/id_rsa.pub | ssh username@remote_host "mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys"
</code>
При необходимости эта команда создаст каталог, а если каталог уже существует, команда ничего не сделает:
<code>
mkdir -p ~/.ssh
</code>

==== Ищем и удаляем Zombie процессы. ====
<code>
top | grep zombie

ps aux | grep -w Z

ps -alx | awk '$10 ~ /STAT|Z/'

ps aux | grep defunct
</code>
 
Чтобы его завершить, нужно найти "родителя" этого процесса. Для этого используйте команду:

<code>
ps -xal | grep defunct

ps -efl | grep defunct

kill -KILL 3990
</code>

<code>
for i in 33 10 37; do scp /etc/default/sheepdog 192.168.100.${i}:/etc/default; done
for i in 22 23 25 26; do ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.88.${i}; done
</code>

==== echo примеры ====

ПОДСТАНОВКА ПУТИ ДЛЯ СКРЫТЫХ ФАЙЛОВ

ls -d .[!.]?*

Вывод домашнего каталога
echo ~

Посмотреть алфавит
echo {A..Z}


==== Kоманды управления процессами ====

ps

top (htop)

pstree - Выводит список процессов в виде древовидной структуры, отражающей отношения «родитель–потомок» между процессами

vmstat - Выводит мгновенный снимок с информацией об использовании системных ресурсов, включая память, файл подкачки и объем дискового ввода/вывода. Чтобы увидеть, как изменяется эта информация с течением времени, передайте команде интервал задержки (в секундах) между обновлениями (например, vmstat 5). Завершить работу команды можно нажатием CTRL+C

xload - Программа с графическим интерфейсом, показывающая изменение нагрузки на систему с течением времени


tload - Работает подобно программе xload, но рисует график в терминале. Завершается работа команды нажатием CTRL+C

==== Команды для архивирования ====
<code>
tar cf file.tar files – создать tar-архив с именем file.tar содержащий files

tar xf file.tar – распаковать file.tar

tar czf file.tar.gz files – создать архив tar с сжатием Gzip

tar xzf file.tar.gz – распаковать tar с Gzip

tar cjf file.tar.bz2 – создать архив tar с сжатием Bzip2

tar xjf file.tar.bz2 – распаковать tar с Bzip2

gzip file – сжать file и переименовать в file.gz

gzip -d file.gz - распаковать file.gz в file
</code>

==== Команда ifconfig считается устаревшей и постепенно вытесняется командой ip ====
<code>
ip addr show - отобразить список сетевых интерфейсов с адресами. Возможно сокращение параметров команды - ip a sh или ip a s
ip addr list permanent - отобразить только статические ip адреса
ip addr list dynamic - отобразить только динамические ip адреса
ip addr add 1.1.1.13/24 dev eth0 - установить ip адрес для интерфейса eth0
ip addr del 1.1.1.13/24 dev eth0 - удалить ip адрес интерфейса eth0
ip addr flush dev eth0 - удалить все ip адреса интерфейса eth0
ip addr help - отобразить справку по команде ip addr
ip route show - отобразить сведения о маршрутах. В сокращенном варианте - ip r s
ip route show table 255 - отобразить все маршруты из таблицы 255 ip route get 10.10.20.0/24 - отобразить маршрут к этой сети ip route get 10.10.20.0/24 from 192.168.1.100 - отобразить маршрут к этой сети от указного интерфейса с IP=192.168.1.100.
ip route add 10.10.20.0/24 via 192.168.5.1 - создать маршрут к заданной сети через интерфейс c IP=192.168.5.1
ip route delete 10.10.20.0/24 - удалить указанный маршрут.
ip route del 10.10.20.0/24 via 192.168.50.100 - удалить указанный маршрут.
ip route add default via 192.168.50.100 - создать маршрут по умолчанию.
ip route add 10.10.20.0/24 dev eth0 - создать маршрут к указной сети .
ip route add table nnn 10.10.20.0/24 dev eth0 - создать маршрут в специальной таблице маршрутов с номером nnn.
ip route add to blackhole 10.10.0.0/16- создать фиктивный маршрут.
ip route add unreachable 10.10.0.0/16 - создать недостижимый маршрут.
ip link show - отобразить список сетевых интерфейсов.
ip link show eth0 - отобразить состояние eth0
ip link list up - отобразить статус всех включенных интерфейсов
ip link set eth1 up - включить интерфейс eth1
ip link set eth1 down - выключить интерфейс eth1
nslookup - запуск nslookup в интерактивном режиме.
nslookup mail.ru - отобразить сведения для домена mail.ru с использованием сервера DNS из сетевых настроек.
nslookup mail.ru 8.8.8.8 - отобразить сведения для домена mail.ru с использованием сервера DNS с адресом 8.8.8.8 (публичный DNS-сервер Google).
nslookup –query=mx mail.ru - отобразить запись типа MX для домена mail.ru.
</code>

==== Управление сервисами systemd через утилиту systemctl ====
<code>
systemctl start name.service – запуск сервиса.
systemctl stop name.service — остановка сервиса
systemctl restart name.service — перезапуск сервиса
systemctl try-restart name.service — перезапуск сервиса только, если он запущен
systemctl reload name.service — перезагрузка конфигурации сервиса
systemctl status name.service — проверка, запущен ли сервис с детальным выводом состояния сервиса
systemctl is-active name.service — проверка, запущен ли сервис с простым ответом: active или inactive
systemctl list-units --type service --all – отображение статуса всех сервисов
systemctl enable name.service – активирует сервис (позволяет стартовать во время запуска системы)
systemctl disable name.service – деактивирует сервис
systemctl reenable name.service – деактивирует сервис и сразу активирует его
systemctl is–enabled name.service – проверяет, активирован ли сервис
systemctl list-unit-files --type service – отображает все сервисы и проверяет, какие из них активированы
systemctl mask name.service – заменяет файл сервиса симлинком на /dev/null, делая юнит недоступным для systemd
systemctl unmask name.service – возвращает файл сервиса, делая юнит доступным для systemd
</code>