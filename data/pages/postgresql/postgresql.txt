===== Основные команды =====


Заходим 

# ​su postgres

Чтобы создать базу данных необходимо написать стандартную команду SQL:
<code>
CREATE DATABASE test_db;
</code>
Чтобы создать пользователя воспользуйтесь командой:
<code>
CREATE USER test_user WITH password 'qwerty';
</code>

Но на данную базу данных у пользователя не будет прав. Чтобы создать базу с владельцем добавьте опциональный параметр OWNER:
<code>
CREATE DATABASE test_database OWNER test_user;
</code>
Можно также дать права на базу пользователю командой:
<code>
GRANT ALL privileges ON DATABASE test_db TO test_user;
</code>
Для удаления базы данных можно воспользоваться командой:
<code>
DROP DATABASE test_db;
</code>

Экспорт:  
<code>
pg_dump -U username -h localhost databasename >> sqlfile.sql

pg_dump -Fc -v - -host=localhost - -username=zabbix - -dbname=zabbix_db -f zabbix_db.dump  

pg_dump -Fc -v - -host=localhost - -username=masterlogin - -dbname=testdb -f testdb.dump

Дамп конкретной БД
pg_dump -h localhost -O -F t -c -U postgres <имя_бд> | gzip -c > <имя_файла>.gz

Где:
-h [host]: имя хоста, значение по умолчанию localhost или значение из переменной окружения PGHOST.
-О: пропускает команды для установки владельца таблиц, видов и т. д.
-F {c|t|p}: формат вывода данных custom, tar, plane text.
-c: добавляет команды для удаления (drop) объектов (таблиц, видов и т. д.).
-U [username]: — пользователь, чьими правами доступа нужно воспользоваться при запросе данных. По умолчанию берется текущий пользователь.

Дамп всех БД
pg_dumpall | gzip -c > <имя_файла>.gz

</code>

Импорт:
<code>
# psql < sqlfile.sql 

pg_restore -v - -no-owner - -host=mydemoserver.postgres.database.azure.com - -port=5432 - -username=mylogin@mydemoserver - -dbname=mypgsqldb testdb.dump
</code>
//При включении параметра - -no-owner все объекты, созданные во время восстановления, будут присвоены пользователю, отмеченному - -username.//__Подчёркнутый__

Отобразить папку с базами данных
<code>
ps auxw | grep postgres | grep -- -D
</code>

Список баз
<code>
psql -l
</code>